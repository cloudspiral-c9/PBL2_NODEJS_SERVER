

var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');

var IngredientMongoHelper = {
	
	//MongoDBに接続が必要な処理をする処理をラップするメソッド
	_executeMongoUseFunc: function(executeFunc) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			//MongoDBに接続できない場合は例外を発生
			if (err) {
				throw err;
			}

			executeFunc(db, def);
		});

		return def.promise;
	},

	getIngredients: function(rid) {

		var executeFunc = function(db, deferred) {
			
			if (!rid) {
				deferred.resolve(false);
			}

			var collection = db.collection('Ingredient');
			var query = {'rid': rid};

			var cursor = collection.find(query);

			var result = new Array();
			cursor.each(function(err, doc) {

				if (doc == null) {
					db.close();
					var jsonResult = JSON.stringify(result);
					deferred.resolve(jsonResult);
				} else {
					result.push(doc);
				}
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},

	insertIngredients: function(rid, foodNameAmountMap, sender) {
		
		var that = this;
		var executeFunc = function(db, deferred) {
			
			if (!(rid && foodNameAmountMap && sender)) {
				db.close();
				deferred.resolve(false);
			}

			var query = that._makeInsertQuery(rid, foodNameAmountMap, sender)
			db.collection('Ingredient').insert(query, function(err, doc) {
				
				db.close();

				if (err) {
					deferred.resolve(false);
				}

				deferred.resolve(true);
			});
		}

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},

	_makeInsertQuery: function(rid, foodNameAmountMap, sender) {
		var query = new Array();
		Object.keys(foodNameAmountMap).forEach(function(ingredient) {
			query.push({'rid': rid, 'sender': sender, 'ingredient': ingredient, 'amount': foodNameAmountMap[ingredient]});
		});
		return query;
	}
	
};

exports.IngredientMongoHelper = IngredientMongoHelper;