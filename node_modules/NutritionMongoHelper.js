
var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');


var NutritionMongoHelper = {

	//MongoDBに接続が必要な処理をする処理をラップするメソッド
	_executeMongoUseFunc: function(executeFunc) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			//MongoDBに接続できない場合は例外を発生
			if (err) {
				throw err;
			}

			executeFunc(db, def)
		});

		return def.promise;
	},

	getNutritionByFoodNames: function(foodNameAmountMap) {

		var executeFunc = function(db, def){
			
			if (!foodNames) {
				def.resolve(false);
			}

			var query = helper._makeQuery(foodNameAmountMap);
			console.log(query);
			
			var collection = db.collection('nutrition');
			var cursor = collection.find(query);

			var result = new Array();
			cursor.each (function(err, doc) {
				
				if (doc == null) {
					db.close();
					var jsonResult = JSON.stringify(result);
					def.resolve(jsonResult);
				} else {
					var retDoc = this._calcNutritions(foodNameAmountMap, doc);
					result.push(retDoc);
				}

			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return def.promise;
	},

	_makeQuery: function(foodNameAmountMap) {
		var foodNames = Object.keys(foodNameAmountMap);
		var query = {'$or': foodNames};
		return query;
	},

	//Amountを考慮し栄養価を計算した後のMapを返す
	_calcNutritions: function(foodNameAmountMap, doc) {
		
		var retDoc = new Object();
		Object.keys(doc).forEach(function(nutritionName) {
			retDoc[nutritionName] = doc[nutritionName] * foodNameAmountMap[nutritionName];
		});

		return retDoc;
	}

}

//外部モジュールにメソッドを公開
exports.NutritionMongoHelper = NutritionMongoHelper
