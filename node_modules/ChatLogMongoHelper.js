
var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');

var ChatLogMongoHelper = {
	
	//MongoDBに接続が必要な処理をする処理をラップするメソッド
	_executeMongoUseFunc: function(executeFunc) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			//MongoDBに接続できない場合は例外を発生
			if (err) {
				throw err;
			}

			executeFunc(db, def)
		});

		return def.promise;
	},

	getChatLog: function(rid, pos, limit) {

		var executeFunc = function(db, deferred) {

			if (!rid) {
				db.close();
				deferred.resolve(false);
			}

			var collection = db.collection('ChatLog');
			var query = {'rid': rid};

			var cursor = collection.find(query);
			cursor.sort({'date': 'desc'});

			if (pos) {
				cursor.skip(pos);
			} 

			if (limit) {
				cursor.limit(limit);
			}

			var result = new Array();
			cursor.each(function(err, doc) {
				
				if (doc == null) {
					db.close();
					var jsonResult = JSON.stringify(result);
					deferred.resolve(jsonResult);
				} else {
					result.push(doc);
				}	
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},


	insertMessage: function(rid, message, sender, now) {
		
		var executeFunc = function(db, deferred) {
			
			if (!(rid && message)) {
				db.close();
				deferred.resolve(false);
			}

			var query = {'rid': rid, 'sender': sender, 'message': message, 'timestamp': now};
			db.collection('ChatLog').insert(query, function(err, doc) {
				
				db.close();

				if (err) {
					deferred.resolve(false);
				}

				deferred.resolve(true);
			});

		}

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	}
};

exports = ChatLogMongoHelper;