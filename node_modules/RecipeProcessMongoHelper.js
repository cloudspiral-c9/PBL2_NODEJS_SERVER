
var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');

var RecipeProcessMongoHelper = {
	
	//MongoDBに接続が必要な処理をする処理をラップするメソッド
	_executeMongoUseFunc: function(executeFunc) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			//MongoDBに接続できない場合は例外を発生
			if (err) {
				throw err;
			}

			executeFunc(db, def);
		});

		return def.promise;
	},

	getRecipeProcesses: function(rid) {

		var executeFunc = function(db, deferred) {

			if (!rid) {
				deferred.resolve(false);
			}

			var query = {'rid': rid};
			var cursor = db.collection('Process').find(query);

			var result = new Array();
			cursor.each(function(err, doc) {
				if (doc == null) {
					db.close();
					var jsonResult = JSON.stringify(result);
					deferred.resolve(jsonResult);
				} else {
					result.push(doc);
				}
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},

	insertRecipeProcess: function(rid, process, sender, processSequence, now) {

		var executeFunc = function(db, deferred) {

			if (!(rid && process && sender)) {
				db.close();
				deferred.resolve(false);
			}

			var query = {'rid': rid, 'process': process, 'sender': sender, 'timestamp': now};
			if (processSequence) {
				query['processSequence'] = processSequence;
			}

			db.collection('Process').insert(query, function(err, doc) {

				db.close();
				if (err) {
					deferred.resolve(false);
				}

				deferred.resolve(true);
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	}
};

exports = RecipeProcessMongoHelper;