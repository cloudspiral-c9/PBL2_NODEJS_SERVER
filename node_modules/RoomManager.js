
var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');

var RoomManager = {

	//指定したroomNameで新たな部屋を作成
	createNewRoom: function(roomName, limit) {

		var def = deferred();
		var manager = this;

		//既存のroomNameか確認
		//なければデータベースに登録し成功したか失敗かを返す
		this._isExist(roomName)
				
		.done(function(isExist) {
			if (!isExist) {

				manager._insertRoomName(roomName, limit)

				.done(function(result){

					def.resolve(result);
				
				}, 

				function(err) {
					console.log(err);
				});

			}
		}, 

		function(err) {
			console.log(err);
		});

		return def.promise;

	},

	//指定したroomNameをDBから削除
	deleteRoomName: function(roomName) {

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			var collection = db.collection('room');
			
			var query = {'roomName': roomName};
			collection.remove(query, function(err, result) {
				if (err) {
					throw err;
				}
			});

		});
	},

	//指定したroomNameの部屋に人を追加
	//上限に達している場合はfalseを返す
	addMember: function(roomName) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			var query = {'roomName': roomName};
			var collection = db.collection('room');
			collection.findOne(query, function(err, result) {
				
				//部屋がない場合false
				if (err || !result) {
					def.resolve(false);
				} 
					
				var limit = result.limit;
				var num = result.num;
				
				//人数が上限を超える場合false
				if (++num > limit) {
					def.resolve(false);
				} else {
				
					//人数を一人追加してDBを更新
					var updateQuery = {'$set': {'num': num}}; 
					collection.update(query, updateQuery, function(err, count, status) {
							
						db.close();
							
						if (err) {
							def.resolve(false);
						} 
						def.resolve(true);
							
					});
				}

			});
		});

		return def.promise;
	},

	//指定したroomNameをDBに登録
	_insertRoomName: function(roomName, limit) {
		
		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			var collection = db.collection('room');
			var query = {'roomName': roomName, 'limit': limit, 'num': 1, 'timestamp': new Date().toString() };
			collection.insert(query, function(err, doc) {

				if (err) {
					def.resolve(false);
				} else {
					def.resolve(true);
				}
			});
		});
		
		return def.promise;
	},

	//既存のroomNameかを確認
	//既存ならtrueを返す
	_isExist: function(roomName) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			if (err) {
				throw err;
			}

			if (!roomName) {
				return true;
			}

			var query = {'roomName': roomName};
			db.collection('room').findOne(query, function(err, result) {
				if (result) {
					def.resolve(true);
				} else {
					def.resolve(false);
				}
				db.close();
			});
		});

		return def.promise;
	}

};

RoomManager.addMember('testRoom1');
exports.RoomManager = RoomManager;
