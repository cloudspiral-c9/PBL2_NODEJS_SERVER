
var MongoClient = require('mongodb').MongoClient;
var deferred = require('deferred');

var RoomManager = {

	//MongoDBに接続が必要な処理をする処理をラップするメソッド
	_executeMongoUseFunc: function(executeFunc) {

		var def = deferred();

		MongoClient.connect('mongodb://localhost/recipeer', function(err, db) {

			//MongoDBに接続できない場合は例外を発生
			if (err) {
				throw err;
			}

			executeFunc(db, def)
		});

		return def.promise;
	},


	//現在のRidを返し，DB内のridのカウントを1インクリメントする
	//DB内に存在しなければridを1として新たに作成しDBに登録する．
	respondCurrentRid: function() {

		var executeFunc = function(db, deferred) {
			
			var collection = db.collection('RoomNumber');
			
			var query = { 'currentRoomNumber': {'$exists': true} };
			collection.findOne(query, function(err, result) {
				
				var currentRoomNumber = (result == null) ? 0 : result['currentRoomNumber'];
				var updateQuery = {'$set': {'currentRoomNumber': ++currentRoomNumber}};
				var upsert = {upsert: true};
				collection.update(query, updateQuery, upsert, function(err, count, status) {
						
					db.close();

					if (err) {
						deferred.resolve(false);
					}

					deferred.resolve(currentRoomNumber);
				});
				 
			});
		};
		
		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},

	//rid, name, limitを指定して新しい部屋を作成する．
	//nameはレシピ名, limitは部屋の定員
	//成功した場合はtrueを返す
	createNewRoom: function(rid, name, limit) {

		var executeFunc = function(db, deferred) {
			
			var collection = db.collection('Room');
			var now = new Date().toString();
			var query = {'rid': rid, 'name': name, 'num': 1, 'limit': limit, 'timestamp': now};

			collection.insert(query, function(err, doc) {

				db.close();

				if (err) {
					deferred.resolve(false);
				}

				deferred.resolve(true);
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	},


	//指定したridを持つ部屋の人数を一人増やす
	//定員オーバーやDBエラーの場合はfalseを返す
	addMember: function(rid) {

		var executeFunc = function(db, deferred) {

			var collection = db.collection('Room');
			var query = {'rid': rid};

			collection.findOne(query, function(err, result) {
				
				if (err || !result.num || !result.limit ) {
					deferred.resolve(false);
				} 

				var num = result['num'] + 1;
				var limit = result['limit'];

				if (limit < num) {
					deferred.resolve(false);
				}

				updateQuery = {'$set': {'num': num} };
				collection.update(query, updateQuery, function(err, count, status) {
					
					if (err) {
						deferred.resolve(false);
					}

					deferred.resolve(true);
				});
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise; 
	},

	//ridで指定した部屋を削除する
	removeRoom: function(rid) {

		var executeFunc = function(db, deferred) {
			
			var collection = db.collection('Room');
			var query = {'rid': rid};

			collection.remove(query, function(err, result) {
				
				if (err) {
					deferred.resolve(false);
				}

				deferred.resolve(true);
			});
		};

		var promise = this._executeMongoUseFunc(executeFunc);
		return promise;
	}

};

exports.RoomManager = RoomManager;
